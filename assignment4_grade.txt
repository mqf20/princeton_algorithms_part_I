ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
Checkstyle:   FAILED (6 warnings)

Correctness:  32/42 tests passed
Memory:       11/11 tests passed
Timing:       12/17 tests passed

Aggregate score: 79.83%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
7.0K Jun 15 00:47 Board.java
5.5K Jun 15 00:47 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% checkstyle *.java
*-----------------------------------------------------------
Board.java:2:8: Unused import statement for 'java.util.Comparator'. [UnusedImports]
Solver.java:144:11: The instance (or static) variable 'board' must be private. [VisibilityModifier]
Solver.java:145:16: The instance (or static) variable 'prevSearchNode' must be private. [VisibilityModifier]
Solver.java:146:9: The instance (or static) variable 'priority' must be private. [VisibilityModifier]
Solver.java:147:9: The instance (or static) variable 'numMoves' must be private. [VisibilityModifier]
Solver.java:196:7: Do not catch 'Exception' in this course. [IllegalCatch]
Checkstyle ends with 6 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: Test hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: Test hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: Test manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: Test manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: Test dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
==> passed

Test 4a: Test toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
    - incorrect student toString()
        10
         1 2 3 4 5 6 7 8 910
        11121314151617181920
        21222324252627282930
        31323334353637383940
        41424344454647484950
        51525354555657585960
        61626364656667686970
        71727374757677787980
        81828384858687888990
        919293949596979899 0

        vs.

        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 

  * puzzle06.txt
    - incorrect student toString()
        4
         0 1 2 3
         5 6 7 4
         91011 8
        13141512

        vs.

        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 

  * puzzle09.txt
    - incorrect student toString()
        4
         2 0 3 4
         110 6 8
         5 9 712
        13141115

        vs.

        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 

  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> FAILED

Test 4b: Test toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
    - incorrect student toString()
        4
        1113 8 4
        141015 3
         5 7 0 9
        12 6 2 1

        vs.

        4
        11 13  8  4 
        14 10 15  3 
         5  7  0  9 
        12  6  2  1 

    - failed on trial 1 of 1000

  * 5-by-5
    - incorrect student toString()
        5
        19 0 216 4
         715 3 612
         5 1112010
        13 8211424
         922182317

        vs.

        5
        19  0  2 16  4 
         7 15  3  6 12 
         5  1 11 20 10 
        13  8 21 14 24 
         9 22 18 23 17 

    - failed on trial 1 of 1000

  * 9-by-9
    - incorrect student toString()
        9
        69 472755537141752
        7935471153 3615849
        261934215046243371
        39 845514118 56348
        446529204278307670
        432738236067 66440
        16 232107315742856
         17725595466223613
        62126857 0 731 980

        vs.

        9
        69  4 72 75 55 37 14 17 52 
        79 35 47 11 53  3 61 58 49 
        26 19 34 21 50 46 24 33 71 
        39  8 45 51 41 18  5 63 48 
        44 65 29 20 42 78 30 76 70 
        43 27 38 23 60 67  6 64 40 
        16  2 32 10 73 15 74 28 56 
         1 77 25 59 54 66 22 36 13 
        62 12 68 57  0  7 31  9 80 

    - failed on trial 1 of 100

  * 10-by-10
    - incorrect student toString()
        10
        71687962613498515238
         83321 013 3906078 4
        48874689145028554039
        44 17532631566 21016
        27531243188258172431
        842649768864657054 5
        86594596978185 67393
        69562342307457836794
        20917725221911 9 772
        41809992353729953647

        vs.

        10
        71 68 79 62 61 34 98 51 52 38 
         8 33 21  0 13  3 90 60 78  4 
        48 87 46 89 14 50 28 55 40 39 
        44  1 75 32 63 15 66  2 10 16 
        27 53 12 43 18 82 58 17 24 31 
        84 26 49 76 88 64 65 70 54  5 
        86 59 45 96 97 81 85  6 73 93 
        69 56 23 42 30 74 57 83 67 94 
        20 91 77 25 22 19 11  9  7 72 
        41 80 99 92 35 37 29 95 36 47 

    - failed on trial 1 of 100

  * 127-by-127
    - incorrect student toString()
    - failed on trial 1 of 10

==> FAILED

Test 5a: Test neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - neighbor not found by student:
        [suppressed]

  * puzzle06.txt
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - neighbor not found by student:
        4
         1  0  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 

  * puzzle09.txt
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - neighbor not found by student:
        4
         0  2  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 

  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> FAILED

Test 5b: Test neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - neighbor not found by student:
        4
         7  4 14  0 
         1 15  8 13 
         2 12  3  5 
         9  6 11 10 

    - failed on trial 1 of 1000

  * 5-by-5
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - neighbor not found by student:
        5
         0 16 17 22 21 
         2  9 18 14 15 
         3 19  6  7 13 
         8 12 20  1 24 
         5  4 23 10 11 

    - failed on trial 1 of 1000

  * 9-by-9
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - neighbor not found by student:
        9
        51  5 15 77 17 54 57 34 21 
        76  1 62  3 45 38  0 70 74 
        37 12  7 80 43 50 58 22  6 
        32 29 53 49 20 14 71 72 75 
        69  4 67 79 41 30 73 23  9 
        60 56 40 31 16 47 46  2 19 
        11 27  8 63 64 44 68 59 25 
        10 24 26 13 78 52 42 35 65 
        55 48 33 39 61 28 18 36 66 

    - failed on trial 1 of 1000

  * 10-by-10
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - neighbor not found by student:
        [suppressed]

    - failed on trial 1 of 1000

  * 127-by-127
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - neighbor not found by student:
        [suppressed]

    - failed on trial 1 of 10

==> FAILED

Test 6a: Test neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: 1
 0 

    - 6 missing entries in student solution, including: 10
 1  2  3  4  5  6  7  8  9 10 
11 12 13 14 15 16 17 18 19 20 
21 22 23 24 25 26 27 28 29 30 
31 32 33 34 35 36 37 38 39 40 
41 42 43 44 45 46 47 48 49 50 
51 52 53 54 55 56 57 58 59 60 
61 62 63 64 65 66 67 68 69 70 
71 72 73 74 75 76 77 78 79 80 
81 82 83 84 85 86 87 88 89 90 
91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: 1
 0 

    - 6 missing entries in student solution, including: 4
 5  1  2  3 
 9  6  7  4 
 0 10 11  8 
13 14 15 12 


  * puzzle09.txt
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - student   solution has 9 non-null entries
    - reference solution has 9 non-null entries
    - 9 extra entries in student solution, including: 1
 0 

    - 9 missing entries in student solution, including: 4
 2 10  3  4 
 1  9  6  8 
 5  0  7 12 
13 14 11 15 


  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> FAILED

Test 6b: Test neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - student   solution has 9 non-null entries
    - reference solution has 9 non-null entries
    - 9 extra entries in student solution, including: 1
 0 

    - 9 missing entries in student solution, including: 4
14  0 12 10 
 9  4 13  6 
15  7  8 11 
 3  1  5  2 


    - failed on trial 1 of 1000

  * 5-by-5
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - student   solution has 15 non-null entries
    - reference solution has 15 non-null entries
    - 15 extra entries in student solution, including: 1
 0 

    - 15 missing entries in student solution, including: 5
 4 20 16  3 10 
22 24  8  9 12 
 2  0 18 21 17 
19 15  6 14 13 
 1  5 23  7 11 


    - failed on trial 1 of 1000

  * 9-by-9
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: 1
 0 

    - 6 missing entries in student solution, including: 9
20 80 18 10 66 52 76 53 29 
75 50  8 19 78 47 39 34 37 
48 56 26 57 51 15 35  1  0 
12 68 60 49 31 65 62 58  5 
79 59 21 73 23 63 40 33 41 
11 77 54 45  9 43 32 46  7 
55 44 16  6 13 38  2 69 28 
71 14  4 67 30 42  3 24 25 
27 17 36 22 70 74 72 64 61 


    - failed on trial 1 of 1000

  * 10-by-10
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - toString() returns string in wrong format
    - student   solution has 15 non-null entries
    - reference solution has 15 non-null entries
    - 15 extra entries in student solution, including: 1
 0 

    - 15 missing entries in student solution, including: 10
97 64 28 83 46 80 61 48 43 75 
82 99 31 54 95  2 38 93 96 71 
49 17 15 22  0 73 25 53 69 90 
37 60 66 89 34 33 10  6 92 35 
24 42 74 13 88 11 27  7 58 12 
26 20 86 19 68 57 76 98 85 63 
91  5 78 32 36 16 84  1 30 87 
47 44 79 56  3 65 14 29 39  8 
23 67 18 40 50  4 77 52  9 51 
81 45 94 72 41 59 62 55 21 70 


    - failed on trial 1 of 1000

==> FAILED

Test 7a: Test twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
    - toString() returns string in wrong format
    - twin() doesn't return a twin
        10
        98 2 3 4 5 6 7 8 910
        11121314151617181920
        21222324252627282930
        31323334353637383940
        41424344454647484950
        51525354555657585960
        61626364656667686970
        71727374757677787980
        81828384858687888990
        91929394959697 199 0

  * puzzle06.txt
    - toString() returns string in wrong format
    - twin() doesn't return a twin
        4
         0 1 2 3
         5 6 4 7
         91011 8
        13141512

  * puzzle09.txt
    - toString() returns string in wrong format
    - twin() doesn't return a twin
        4
         2 0 3 1
         410 6 8
         5 9 712
        13141115

  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> FAILED

Test 7b: Test twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
    - toString() returns string in wrong format
    - twin() doesn't return a twin
        4
         8 5 3 4
        1213 2 0
         7141015
         1 611 9

    - failed on trial 1 of 1000

  * 5-by-5
    - toString() returns string in wrong format
    - twin() doesn't return a twin
        5
         920161317
         71418 310
         611 8 1 5
        2221 01523
        12 224 419

    - failed on trial 1 of 1000

  * 9-by-9
    - toString() returns string in wrong format
    - twin() doesn't return a twin
        9
        203644 61937263912
        23246249 9603373 8
        1364713210 4792927
        11 715571868482561
        636650536922523176
        551445677017415934
        3558652130 3561678
         08042 24374 14047
        2851 5465475773872

    - failed on trial 1 of 100

  * 10-by-10
    - toString() returns string in wrong format
    - twin() doesn't return a twin
        10
        28768336553398 46787
        1264683452 1 9662411
        604245 8749291623519
        5625 030599940314317
        47225716382627582384
        14 74615904882778979
        637295 6695078494494
        97851088734181 21380
        939639652975 5618618
        533237 3202154715170

    - failed on trial 1 of 10

==> FAILED

Test 8a: Test isGoal() on file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: Test isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: Check whether two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: Check equals()
  * reflexive
  * symmetric
  * checks that individual entries of array are equal
  * argument is object of type String
  * argument is object of type Object
  * argument is null
  * argument is Board of different dimension
==> passed

Test 10b: Test equals() on m-by-m vs. n-by-n goal boards
  * m = 2, n = 2
  * m = 3, n = 3
  * m = 4, n = 4
  * m = 2, n = 5
  * m = 5, n = 2
==> passed

Test 11: Check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
    - toString() returns string in wrong format
    - student   hamming() = 9
    - reference hamming() = 0
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> FAILED

Test 14: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
    - toString() returns string in wrong format
    - student   manhattan() = 5
    - reference manhattan() = 0
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> FAILED


Total: 12/22 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 20 total tests.

Test 1: Call moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2: Call solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle10.txt
  * puzzle15.txt
==> passed

Test 3: Create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 4a: Call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 4b: Call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 5: Call moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 6: Call solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7a: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 7b: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 8: Call moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 9: Check whether equals() method in Board is called
        with an argument of the wrong type
  * puzzle00.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle15.txt
==> passed

Test 10: Check that constructor throws exception if board is null
==> passed

Test 11: Check for fragile dependence on toString()
  * puzzle00.txt
  * puzzle04.txt
  * puzzle08.txt
  * puzzle12.txt
==> passed

Test 12a: Call moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12b: Call solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 13a: Call moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13b: Call solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 14a: Call moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14b: Call solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 15: Call moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 20/20 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an n-by-n board

              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     4           248                  240
=> passed     8           568                  560
=> passed    12          1016                 1008
=> passed    16          1592                 1584
=> passed    20          2296                 2288
=> passed    36          6392                 6384
=> passed    72         23096                23088
=> passed   120         61496                61488
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



Computing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 4936 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 1.01
==> passed

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 6096 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 1.01
==> passed

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 7256 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 1.01
==> passed


Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TIMING                                                                  
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java.
Maximum time allowed per puzzle is 10 seconds.

               filename   N    seconds    insert()            delMin()         max PQ size
---------------------------------------------------------------------------------------------
=> passed  puzzle20.txt   3     0.21       1988                1183                 806         
=> passed  puzzle21.txt   3  

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
